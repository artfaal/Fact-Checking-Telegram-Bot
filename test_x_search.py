#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ X.com –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–∏—Å–∫–æ–º —Ç–≤–∏—Ç–æ–≤
"""

import asyncio
import logging
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from two_stage_filter import TwoStageFilter

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

async def test_william_gibson_tweet():
    """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Ç–≤–∏—Ç–∞ –£–∏–ª—å—è–º–∞ –ì–∏–±—Å–æ–Ω–∞ –æ –í–∏–∫—Ç–æ—Ä–µ –¶–æ–µ"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Ç–≤–∏—Ç–∞ –£–∏–ª—å—è–º–∞ –ì–∏–±—Å–æ–Ω–∞ –æ –í–∏–∫—Ç–æ—Ä–µ –¶–æ–µ")
    
    # –¢–µ–∫—Å—Ç –∏–∑ —Ç–≤–∏—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tweet_text = """¬´–û—Ç–µ—Ü –ö–∏–±–µ—Ä–ø–∞–Ω–∫–∞¬ª –£–∏–ª–ª—å—è–º –ì–∏–±—Å–æ–Ω –ø—Ä–∏–∑–Ω–∞–ª—Å—è, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –í–∏–∫—Ç–æ—Ä –¶–æ–π –æ–∫–∞–∑–∞–ª —Å–∞–º–æ–µ —Å–∏–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –µ–≥–æ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ.

–ì–∏–±—Å–æ–Ω, –∞–≤—Ç–æ—Ä –∫—É–ª—å—Ç–æ–≤–æ–≥–æ ¬´–ù–µ–π—Ä–æ–º–∞–Ω—Ç–∞¬ª, –æ—Ç–º–µ—Ç–∏–ª, —á—Ç–æ –º—É–∑—ã–∫–∞ –¶–æ—è —Å—Ç–∞–ª–∞ –¥–ª—è –Ω–µ–≥–æ –≥–ª–∞–≤–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è. –û–Ω —Å —Å–æ–∂–∞–ª–µ–Ω–∏–µ–º –¥–æ–±–∞–≤–∏–ª, —á—Ç–æ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –µ–≥–æ —á–∏—Ç–∞—Ç–µ–ª–µ–π –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–ª—ã—à–∞–ª–∏ –Ω–∏ –æ —Å–∞–º–æ–º –º—É–∑—ã–∫–∞–Ω—Ç–µ, –Ω–∏ –æ –µ–≥–æ –ø–µ—Å–Ω—è—Ö.

–ü–æ–∑–∂–µ –ø–æ –∫–∞–Ω–æ–Ω–∞–º, –∑–∞–ª–æ–∂–µ–Ω–Ω—ã–º –ì–∏–±—Å–æ–Ω–æ–º, –ø–æ—è–≤–∏–ª–∏—Å—å –¥–µ—Å—è—Ç–∫–∏ –∫—É–ª—å—Ç–æ–≤—ã—Ö –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π ‚Äî –æ—Ç –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã –¥–æ –∏–≥—Ä, –≤–∫–ª—é—á–∞—è ¬´Cyberpunk 2077¬ª.

–û–± —ç—Ç–æ–º –æ–Ω –Ω–∞–ø–∏—Å–∞–ª —É —Å–µ–±—è –≤ —Ç–≤–∏—Ç—Ç–µ—Ä–µ (X) –≤ –≤–µ—Ä–∏—Ñ—Ç—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ"""
    
    filter_system = TwoStageFilter()
    
    try:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        category, comment, debug_info = await filter_system.analyze_message(
            tweet_text, "X.com Tweet Test"
        )
        
        logger.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
        logger.info(f"  üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
        logger.info(f"  üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}")
        
        if debug_info:
            logger.info("üîß DEBUG INFO:")
            logger.info(f"  ‚è±Ô∏è –≠—Ç–∞–ø 1: {debug_info.stage1_time:.2f}—Å")
            logger.info(f"  ‚è±Ô∏è –≠—Ç–∞–ø 2: {debug_info.stage2_time:.2f}—Å")
            logger.info(f"  üåê –ù–∞–π–¥–µ–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {debug_info.sources_count}")
            logger.info(f"  üìã –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {debug_info.sources_found}")
            logger.info(f"  üîç –í–µ–±-–ø–æ–∏—Å–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: {debug_info.web_search_used}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ X.com –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö
            x_sources = [s for s in debug_info.sources_found if 'x.com' in s.lower() or 'twitter.com' in s.lower()]
            if x_sources:
                logger.info(f"  üê¶ X.com –∏—Å—Ç–æ—á–Ω–∏–∫–∏: {x_sources}")
            else:
                logger.warning("  ‚ö†Ô∏è X.com –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ù–ï –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–ø–∏—Å–∫–µ")
            
            # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if debug_info.detailed_findings:
                logger.info(f"  üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ –≤—ã–≤–æ–¥—ã: {debug_info.detailed_findings}")
            if debug_info.missing_evidence:
                logger.info(f"  ‚ùì –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞: {debug_info.missing_evidence}")
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        raise

async def test_simple_gibson_tsoi():
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Å–≤—è–∑–∏ Gibson-Tsoi"""
    logger.info("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ Gibson + Tsoi")
    
    simple_text = "William Gibson Viktor Tsoi influence"
    
    filter_system = TwoStageFilter()
    
    try:
        category, comment, debug_info = await filter_system.analyze_message(
            simple_text, "Simple Gibson-Tsoi Test"
        )
        
        logger.info("üìä –£–ü–†–û–©–ï–ù–ù–´–ô –¢–ï–°–¢:")
        logger.info(f"  üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
        logger.info(f"  üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}")
        
        if debug_info and debug_info.sources_found:
            x_sources = [s for s in debug_info.sources_found if 'x.com' in s.lower() or 'twitter.com' in s.lower()]
            logger.info(f"  üê¶ X.com –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö: {'–î–ê' if x_sources else '–ù–ï–¢'}")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º —Ç–µ—Å—Ç–µ: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –ø–æ X.com")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–∞ —Ç–µ—Å—Ç–∞
    await test_william_gibson_tweet()
    await test_simple_gibson_tsoi()
    
    logger.info("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(main())