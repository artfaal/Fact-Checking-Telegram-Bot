#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π
"""

import asyncio
import logging
import signal
import sys
from pyrogram import Client, filters
from pyrogram.types import Message
from config import Config
from message_processor import MessageProcessor

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('fact_checker.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

class FactCheckingBot:
    def __init__(self):
        self.bot = Client(
            "fact_checker_bot",
            api_id=Config.TELEGRAM_API_ID,
            api_hash=Config.TELEGRAM_API_HASH,
            bot_token=Config.TELEGRAM_BOT_TOKEN
        )
        self.channels = Config.get_channels()
        self.message_processor = MessageProcessor()
        self.channel_ids = {}
        self.running = False

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            Config.validate()
            logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
            
            await self.message_processor.start()
            await self.bot.start()
            
            # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞–Ω–∞–ª–æ–≤
            for channel in self.channels:
                try:
                    chat = await self.bot.get_chat(channel)
                    self.channel_ids[chat.id] = channel
                    logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–∞–Ω–∞–ª—É: {channel} (ID: {chat.id})")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–∞–Ω–∞–ª—É {channel}: {e}")
            
            if not self.channel_ids:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∏ –∫ –æ–¥–Ω–æ–º—É –∫–∞–Ω–∞–ª—É")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            @self.bot.on_message(filters.chat(list(self.channel_ids.keys())))
            async def handle_message(client, message: Message):
                channel_name = self.channel_ids.get(message.chat.id, "Unknown")
                logger.info(f"üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {channel_name}: {message.text[:100] if message.text else '–º–µ–¥–∏–∞'}...")
                
                try:
                    await self.message_processor.process_message(message, channel_name)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ {channel_name}: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
            await self.send_startup_notification()
            
            self.running = True
            logger.info("üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            
            # –ñ–¥–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
            while self.running:
                await asyncio.sleep(1)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            await self.stop()

    async def send_startup_notification(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ"""
        try:
            channels_text = "\n".join([f"‚Ä¢ {ch}" for ch in self.channels])
            await self.bot.send_message(
                chat_id=Config.TARGET_CHAT_ID,
                text=f"ü§ñ **Fact-checking –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!**\n\n"
                     f"üì° **–ú–æ–Ω–∏—Ç–æ—Ä—é –∫–∞–Ω–∞–ª—ã:**\n{channels_text}\n\n"
                     f"üîç **–§–∞–∫—Ç—á–µ–∫–∏–Ω–≥:** GPT-5 —Å –≤–µ–±-–ø–æ–∏—Å–∫–æ–º\n"
                     f"üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:** –Ω–æ–≤–æ—Å—Ç–∏, —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è, –¥—Ä—É–≥–æ–µ\n"
                     f"üóëÔ∏è **–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è:** —Å–ø–∞–º, –º—É—Å–æ—Ä, –Ω–µ–¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã–µ —Ñ–∞–∫—Ç—ã\n\n"
                     f"‚úÖ **–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!**"
            )
            logger.info("üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        if not self.running:
            return
            
        logger.info("üîÑ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç...")
        self.running = False
        
        try:
            await self.message_processor.stop()
            await self.bot.stop()
            logger.info("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")

async def main():
    bot = FactCheckingBot()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
    def signal_handler(signum, frame):
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...")
        asyncio.create_task(bot.stop())
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    try:
        await bot.start()
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω Ctrl+C, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...")
        await bot.stop()
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        await bot.stop()
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())