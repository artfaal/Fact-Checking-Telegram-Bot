"""
–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
"""

import logging
import asyncio
from typing import Set, Optional
from pyrogram.types import Message
from two_stage_filter import TwoStageFilter, DebugInfo
from telegram_client import TelegramBot
from config import Config

logger = logging.getLogger(__name__)

class DebugMessageProcessor:
    def __init__(self):
        self.two_stage_filter = TwoStageFilter()
        self.telegram_bot = TelegramBot()
        self.processed_messages: Set[int] = set()
        
    async def start(self):
        await self.telegram_bot.start()
        logger.info("üîß Debug –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
        
    async def stop(self):
        await self.telegram_bot.stop()
        logger.info("üîß Debug –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
    async def process_message(self, message: Message, channel_name: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        
        if message.id in self.processed_messages:
            return
            
        self.processed_messages.add(message.id)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
        if len(self.processed_messages) > 10000:
            self.processed_messages.clear()
            
        text_content = self._extract_text(message)
        
        if not text_content:
            logger.info(f"üì≠ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –∏–∑ {channel_name}")
            return
        
        logger.info(f"üì® –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {channel_name}: {text_content[:100]}...")
        
        try:
            # –î–≤—É—Ö—ç—Ç–∞–ø–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            category, gpt_comment, debug_info = await self.two_stage_filter.analyze_message(
                text_content, channel_name
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            if Config.SHOW_ALL_MESSAGES:
                # –í —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                await self._send_debug_message(
                    message, channel_name, category, gpt_comment, debug_info
                )
            else:
                # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - —Ç–æ–ª—å–∫–æ –Ω–µ —Å–∫—Ä—ã—Ç—ã–µ
                if category != "—Å–∫—Ä—ã—Ç–æ":
                    await self.telegram_bot.send_filtered_message(
                        original_message=message,
                        channel_name=channel_name,
                        category=category,
                        gpt_comment=gpt_comment
                    )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ {channel_name}: {e}")
    
    async def _send_debug_message(self, message: Message, channel_name: str, 
                                category: str, gpt_comment: str, debug_info: Optional[DebugInfo]):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if category == "—Å–∫—Ä—ã—Ç–æ":
                status_emoji = "üóëÔ∏è"
                status_text = f"**–°–ö–†–´–¢–û** | {gpt_comment}"
            else:
                emoji_map = {"–Ω–æ–≤–æ—Å—Ç–∏": "üì∞", "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": "üé¨", "–¥—Ä—É–≥–æ–µ": "üìÑ"}
                status_emoji = emoji_map.get(category, "üìÑ")
                status_text = f"**{category.upper()}**"
                if gpt_comment:
                    status_text += f" | ü§ñ {gpt_comment}"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            debug_text = ""
            if debug_info and Config.SEND_DEBUG_INFO:
                debug_text = f"\n\nüîß **DEBUG INFO:**\n"
                debug_text += f"‚è±Ô∏è –≠—Ç–∞–ø 1: {debug_info.stage1_time:.2f}—Å | –≠—Ç–∞–ø 2: {debug_info.stage2_time:.2f}—Å\n"
                debug_text += f"üåê –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {debug_info.sources_count}\n"
                
                if debug_info.sources_found:
                    sources_preview = ", ".join(debug_info.sources_found[:3])
                    if len(debug_info.sources_found) > 3:
                        sources_preview += f" –∏ –µ—â—ë {len(debug_info.sources_found)-3}"
                    debug_text += f"üìã –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {sources_preview}\n"
                
                if debug_info.reasoning:
                    debug_text += f"üí≠ –õ–æ–≥–∏–∫–∞: {debug_info.reasoning}\n"
                
                flags = []
                if debug_info.web_search_used:
                    flags.append("üîç –≤–µ–±-–ø–æ–∏—Å–∫")
                if debug_info.fallback_used:
                    flags.append("üîÑ fallback")
                if flags:
                    debug_text += f"üö© –§–ª–∞–≥–∏: {', '.join(flags)}"
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            original_text = self._extract_text(message)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            final_text = f"üì¢ **{channel_name}** | {status_emoji} {status_text}\n\n"
            
            if original_text:
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                if len(original_text) > 500:
                    original_text = original_text[:500] + "..."
                final_text += f"üìù **–°–æ–æ–±—â–µ–Ω–∏–µ:**\n{original_text}"
            
            final_text += debug_text
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            if message.photo:
                await self.telegram_bot.bot.send_photo(
                    chat_id=Config.TARGET_CHAT_ID,
                    photo=message.photo.file_id,
                    caption=final_text
                )
            elif message.video:
                await self.telegram_bot.bot.send_video(
                    chat_id=Config.TARGET_CHAT_ID,
                    video=message.video.file_id,
                    caption=final_text
                )
            elif message.document:
                await self.telegram_bot.bot.send_document(
                    chat_id=Config.TARGET_CHAT_ID,
                    document=message.document.file_id,
                    caption=final_text
                )
            else:
                await self.telegram_bot.bot.send_message(
                    chat_id=Config.TARGET_CHAT_ID,
                    text=final_text
                )
            
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ debug —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {channel_name} | {category}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ debug —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def _extract_text(self, message: Message) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if message.text:
            return message.text
        elif message.caption:
            return message.caption
        else:
            return ""