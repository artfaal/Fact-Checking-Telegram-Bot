"""
–ü—Ä–æ—Å—Ç–æ–π —Ñ–∏–ª—å—Ç—Ä —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
"""

import logging
import asyncio
import json
from typing import Dict, Tuple, List
from openai import AsyncOpenAI
from config import Config

logger = logging.getLogger(__name__)

class SimpleFilter:
    """–ü—Ä–æ—Å—Ç–æ–π —Ñ–∏–ª—å—Ç—Ä —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    
    def __init__(self, sources: List[str] = None):
        self.client = AsyncOpenAI(api_key=Config.OPENAI_API_KEY)
        self.gpt5_available = True
        
        # –ï—Å–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        self.sources = sources or [
            "reuters.com", "bbc.com", "cnn.com", "tass.ru", "ria.ru",
            "kommersant.ru", "vedomosti.ru", "gazeta.ru", "rbc.ru", "interfax.ru"
        ]
        
        logger.info(f"üîß –ü—Ä–æ—Å—Ç–æ–π —Ñ–∏–ª—å—Ç—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å {len(self.sources)} –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏")
    
    async def analyze_message(self, text: str, channel_name: str) -> Tuple[str, str]:
        """
        –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        """
        if not text or len(text.strip()) < 10:
            return "—Å–∫—Ä—ã—Ç–æ", "–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        
        logger.info(f"üìä –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Å {len(self.sources)} –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏...")
        
        try:
            # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º
            is_spam = await self._quick_spam_check(text)
            if is_spam:
                return "—Å–∫—Ä—ã—Ç–æ", "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∫–∞–∫ —Å–ø–∞–º"
            
            # –§–∞–∫—Ç—á–µ–∫–∏–Ω–≥ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
            category, comment = await self._fact_check_with_sources(text)
            return category, comment
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return "–¥—Ä—É–≥–æ–µ", ""
    
    async def _quick_spam_check(self, text: str) -> bool:
        """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º"""
        spam_indicators = [
            "—Å–∫–∏–¥–∫–∞", "–∞–∫—Ü–∏—è", "–∫—É–ø–∏", "–ø—Ä–æ–¥–∞–º", "–∑–∞—Ä–∞–±–æ—Ç–æ–∫", "–º–ª–Ω —Ä—É–±",
            "–∂–º–∏", "–ø–µ—Ä–µ—Ö–æ–¥–∏", "–∫–ª–∏–∫–∞–π", "—Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è", "—Ç–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å",
            "mega", "super", "–ª—É—á—à–∞—è —Ü–µ–Ω–∞", "–±–µ—Å–ø–ª–∞—Ç–Ω–æ", "!!!!"
        ]
        
        text_lower = text.lower()
        spam_count = sum(1 for indicator in spam_indicators if indicator in text_lower)
        
        # –ï—Å–ª–∏ –º–Ω–æ–≥–æ —Å–ø–∞–º-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤, —Å—á–∏—Ç–∞–µ–º —Å–ø–∞–º–æ–º
        if spam_count >= 3:
            logger.info(f"‚ö° –ë—ã—Å—Ç—Ä–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ —Å–ø–∞–º ({spam_count} –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤)")
            return True
        
        return False
    
    async def _fact_check_with_sources(self, text: str) -> Tuple[str, str]:
        """–§–∞–∫—Ç—á–µ–∫–∏–Ω–≥ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏"""
        
        sources_text = ", ".join(self.sources)
        
        prompt = f"""
–ü—Ä–æ–≤–µ—Ä—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è –≤–µ–±-–ø–æ–∏—Å–∫ –ø–æ –Ω–∞–¥–µ–∂–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:

–°–æ–æ–±—â–µ–Ω–∏–µ: "{text}"

–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {sources_text}

–û–ø—Ä–µ–¥–µ–ª–∏:
1. –ö–∞—Ç–µ–≥–æ—Ä–∏—é: –Ω–æ–≤–æ—Å—Ç–∏, —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–ª–∏ –¥—Ä—É–≥–æ–µ
2. –ù—É–∂–µ–Ω –ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –µ—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–∞—è

–û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{{
    "category": "–Ω–æ–≤–æ—Å—Ç–∏/—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è/–¥—Ä—É–≥–æ–µ",
    "is_questionable": true/false,
    "comment": "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –µ—Å–ª–∏ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ (–¥–æ 60 —Å–∏–º–≤–æ–ª–æ–≤)"
}}
"""

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ–±-–ø–æ–∏—Å–∫ —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
            response = await self.client.responses.create(
                model=Config.GPT_MODEL if self.gpt5_available else "gpt-4o",
                tools=[{
                    "type": "web_search",
                    "filters": {
                        "allowed_domains": self.sources
                    }
                }],
                input=prompt
            )
            
            output_text = response.output_text
            logger.info(f"üìÑ –û—Ç–≤–µ—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞: {output_text[:150]}...")
            
            # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            try:
                json_start = output_text.find('{')
                json_end = output_text.rfind('}') + 1
                if json_start != -1 and json_end > json_start:
                    json_text = output_text[json_start:json_end]
                    result = json.loads(json_text)
                else:
                    raise json.JSONDecodeError("JSON –Ω–µ –Ω–∞–π–¥–µ–Ω", output_text, 0)
                
                category = result.get("category", "–¥—Ä—É–≥–æ–µ")
                
                if result.get("is_questionable", False):
                    comment = result.get("comment", "–¢—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏")
                    return category, comment
                else:
                    return category, ""
                    
            except json.JSONDecodeError:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –ø—Ä–æ—Å—Ç–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞")
                return await self._fallback_check(text)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∞–∫—Ç—á–µ–∫–∏–Ω–≥–∞ –ø—Ä–æ—Å—Ç—ã–º —Ñ–∏–ª—å—Ç—Ä–æ–º: {e}")
            if "gpt-5" in str(e) and self.gpt5_available:
                logger.info("GPT-5 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ GPT-4o")
                self.gpt5_available = False
                return await self._fact_check_with_sources(text)
            
            return await self._fallback_check(text)
    
    async def _fallback_check(self, text: str) -> Tuple[str, str]:
        """–†–µ–∑–µ—Ä–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ –≤–µ–±-–ø–æ–∏—Å–∫–∞"""
        logger.info("üîÑ –†–µ–∑–µ—Ä–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞...")
        
        try:
            response = await self.client.chat.completions.create(
                model="gpt-4o",
                messages=[{
                    "role": "user", 
                    "content": f"""
–û–ø—Ä–µ–¥–µ–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è: "{text}"

–í–∞—Ä–∏–∞–Ω—Ç—ã: –Ω–æ–≤–æ—Å—Ç–∏, —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è, –¥—Ä—É–≥–æ–µ
–û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º.
"""
                }],
                max_completion_tokens=10,
                temperature=0.1
            )
            
            category = response.choices[0].message.content.strip().lower()
            
            if category in ["–Ω–æ–≤–æ—Å—Ç–∏", "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "–¥—Ä—É–≥–æ–µ"]:
                return category, ""
            else:
                return "–¥—Ä—É–≥–æ–µ", ""
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
            return "–¥—Ä—É–≥–æ–µ", ""