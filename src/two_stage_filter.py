"""
–î–≤—É—Ö—ç—Ç–∞–ø–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ñ–∞–∫—Ç—á–µ–∫–∏–Ω–≥–∞ —Å –æ—Ç–ª–∞–¥–∫–æ–π
"""

import logging
import asyncio
import json
import time
from typing import Dict, Tuple, List, Optional
from dataclasses import dataclass
from openai import AsyncOpenAI
from config import Config
from sources_config import sources_config

logger = logging.getLogger(__name__)

@dataclass
class DebugInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    stage1_time: float = 0
    stage2_time: float = 0
    sources_found: List[str] = None
    sources_count: int = 0
    reasoning: str = ""
    web_search_used: bool = False
    fallback_used: bool = False
    
    def __post_init__(self):
        if self.sources_found is None:
            self.sources_found = []

class TwoStageFilter:
    """–î–≤—É—Ö—ç—Ç–∞–ø–Ω—ã–π —Ñ–∞–∫—Ç—á–µ–∫–µ—Ä"""
    
    def __init__(self):
        self.client = AsyncOpenAI(api_key=Config.OPENAI_API_KEY)
        self.gpt5_available = True
        self.sources = sources_config
        
    async def analyze_message(self, text: str, channel_name: str) -> Tuple[str, str, Optional[DebugInfo]]:
        """
        –î–≤—É—Ö—ç—Ç–∞–ø–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (–∫–∞—Ç–µ–≥–æ—Ä–∏—è, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è_–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
        """
        if not text or len(text.strip()) < 10:
            return "—Å–∫—Ä—ã—Ç–æ", "–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", None
            
        debug = DebugInfo() if Config.DEBUG_MODE else None
        
        try:
            # –≠–¢–ê–ü 1: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            start_time = time.time()
            sources = await self._stage1_select_sources(text, debug)
            if debug:
                debug.stage1_time = time.time() - start_time
                debug.sources_found = sources
                debug.sources_count = len(sources)
            
            # –≠–¢–ê–ü 2: –§–∞–∫—Ç—á–µ–∫–∏–Ω–≥ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
            start_time = time.time()
            category, comment = await self._stage2_fact_check(text, sources, debug)
            if debug:
                debug.stage2_time = time.time() - start_time
            
            return category, comment, debug
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–≤—É—Ö—ç—Ç–∞–ø–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            if debug:
                debug.fallback_used = True
                debug.reasoning = f"–û—à–∏–±–∫–∞: {str(e)}"
            return "–¥—Ä—É–≥–æ–µ", "", debug
    
    async def _stage1_select_sources(self, text: str, debug: Optional[DebugInfo]) -> List[str]:
        """
        –≠–¢–ê–ü 1: –£–º–Ω—ã–π –≤—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        logger.info("üîç –≠–¢–ê–ü 1: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")
        
        prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏, –∫–∞–∫–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥–æ–π–¥—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–∫—Ç–æ–≤:

"{text}"

–û–ø—Ä–µ–¥–µ–ª–∏:
1. –ï—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è (Discord, Google, Apple –∏ —Ç.–¥.) - –Ω—É–∂–Ω—ã –∏—Ö –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∞–π—Ç—ã
2. –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ - –Ω—É–∂–Ω—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏  
3. –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞—É—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –Ω—É–∂–Ω—ã –Ω–∞—É—á–Ω—ã–µ –∂—É—Ä–Ω–∞–ª—ã
4. –ï—Å–ª–∏ —ç—Ç–æ –∏–≥—Ä–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ - –Ω—É–∂–Ω—ã —Å–∞–π—Ç—ã –∏–∑–¥–∞—Ç–µ–ª–µ–π/—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
5. –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–ø–∞–º - –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ –Ω—É–∂–Ω—ã

–û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{{
    "topic_type": "company/finance/science/gaming/entertainment/politics/spam/other",
    "mentioned_companies": ["—Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å"],
    "recommended_categories": ["technology", "finance", "science", "entertainment"],
    "reasoning": "–∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞"
}}
"""

        try:
            response = await self.client.chat.completions.create(
                model="gpt-4o",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—É—é –º–æ–¥–µ–ª—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
                messages=[{"role": "user", "content": prompt}],
                max_completion_tokens=200,
                temperature=0.1
            )
            
            result_text = response.choices[0].message.content.strip()
            logger.info(f"üìã –û—Ç–≤–µ—Ç —ç—Ç–∞–ø–∞ 1: {result_text}")
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
            try:
                analysis = json.loads(result_text)
            except json.JSONDecodeError:
                # Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
                analysis = {"topic_type": "other", "recommended_categories": ["general_news"]}
            
            if debug:
                debug.reasoning = analysis.get("reasoning", "")
            
            # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∞–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
            if analysis.get("topic_type") == "spam":
                return []
            
            # –°–æ–±–∏—Ä–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            selected_sources = set()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –Ω–æ–≤–æ—Å—Ç–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            selected_sources.update(self.sources.get_category_domains("general_news"))
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            for category in analysis.get("recommended_categories", []):
                selected_sources.update(self.sources.get_category_domains(category))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∞–π—Ç—ã —É–ø–æ–º—è–Ω—É—Ç—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π
            for company in analysis.get("mentioned_companies", []):
                company_lower = company.lower()
                if company_lower in self.sources.sources["company_specifics"]["patterns"]:
                    company_domains = self.sources.sources["company_specifics"]["patterns"][company_lower]
                    selected_sources.update(company_domains)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º—ã
            auto_sources = self.sources.get_sources_for_topic(text)
            selected_sources.update(auto_sources)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            final_sources = list(selected_sources)[:Config.MAX_SOURCE_DOMAINS]
            
            logger.info(f"‚úÖ –≠–¢–ê–ü 1 –∑–∞–≤–µ—Ä—à–µ–Ω: –≤—ã–±—Ä–∞–Ω–æ {len(final_sources)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
            return final_sources
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç—Ç–∞–ø–∞ 1: {e}")
            # Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            return self.sources.get_category_domains("general_news")[:10]
    
    async def _stage2_fact_check(self, text: str, sources: List[str], debug: Optional[DebugInfo]) -> Tuple[str, str]:
        """
        –≠–¢–ê–ü 2: –§–∞–∫—Ç—á–µ–∫–∏–Ω–≥ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        """
        logger.info(f"üìä –≠–¢–ê–ü 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–∫—Ç—ã –ø–æ {len(sources)} –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º...")
        
        if not sources:
            # –ï—Å–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ –Ω—É–∂–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–ø–∞–º), –¥–µ–ª–∞–µ–º –±—ã—Å—Ç—Ä—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
            return await self._quick_spam_check(text, debug)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º—Ç –¥–ª—è —Ñ–∞–∫—Ç—á–µ–∫–∏–Ω–≥–∞
        sources_text = "\n".join([f"‚Ä¢ {domain}" for domain in sources[:15]])
        
        prompt = f"""
–ü—Ä–æ–≤–µ—Ä—å –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è –≤–µ–±-–ø–æ–∏—Å–∫ –¢–û–õ–¨–ö–û –ø–æ —ç—Ç–∏–º –Ω–∞–¥–µ–∂–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:

{sources_text}

–°–æ–æ–±—â–µ–Ω–∏–µ: "{text}"

–ó–∞–¥–∞—á–∞:
1. –ù–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö
2. –û–ø—Ä–µ–¥–µ–ª–∏: —ç—Ç–æ —Å–ø–∞–º/–º—É—Å–æ—Ä –∏–ª–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
3. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–∞—è - –¥–∞–π –∫—Ä–∞—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
4. –û–ø—Ä–µ–¥–µ–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: –Ω–æ–≤–æ—Å—Ç–∏, —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–ª–∏ –¥—Ä—É–≥–æ–µ

–û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{{
    "is_garbage": true/false,
    "is_questionable": true/false,  
    "category": "–Ω–æ–≤–æ—Å—Ç–∏/—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è/–¥—Ä—É–≥–æ–µ",
    "reason": "–ø—Ä–∏—á–∏–Ω–∞ –µ—Å–ª–∏ –º—É—Å–æ—Ä",
    "comment": "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –µ—Å–ª–∏ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ (–¥–æ 60 —Å–∏–º–≤–æ–ª–æ–≤)",
    "sources_checked": ["—Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"]
}}
"""

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ–±-–ø–æ–∏—Å–∫ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
            response = await self.client.responses.create(
                model=Config.GPT_MODEL if self.gpt5_available else "gpt-4o",
                tools=[{
                    "type": "web_search",
                    "filters": {
                        "allowed_domains": sources
                    }
                }],
                input=prompt
            )
            
            if debug:
                debug.web_search_used = True
            
            output_text = response.output_text
            logger.info(f"üìÑ –û—Ç–≤–µ—Ç —ç—Ç–∞–ø–∞ 2: {output_text[:200]}...")
            
            # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            try:
                json_start = output_text.find('{')
                json_end = output_text.rfind('}') + 1
                if json_start != -1 and json_end > json_start:
                    json_text = output_text[json_start:json_end]
                    result = json.loads(json_text)
                else:
                    raise json.JSONDecodeError("JSON –Ω–µ –Ω–∞–π–¥–µ–Ω", output_text, 0)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if result.get("is_garbage", False):
                    return "—Å–∫—Ä—ã—Ç–æ", result.get("reason", "")
                elif result.get("is_questionable", False):
                    category = result.get("category", "–¥—Ä—É–≥–æ–µ")
                    comment = result.get("comment", "")
                    return category, comment
                else:
                    category = result.get("category", "–¥—Ä—É–≥–æ–µ")
                    return category, ""
                    
            except json.JSONDecodeError:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                if debug:
                    debug.fallback_used = True
                return await self._fallback_check(text, debug)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç—Ç–∞–ø–∞ 2: {e}")
            if "gpt-5" in str(e) and self.gpt5_available:
                logger.info("GPT-5 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ GPT-4o")
                self.gpt5_available = False
                return await self._stage2_fact_check(text, sources, debug)
            
            if debug:
                debug.fallback_used = True
            return await self._fallback_check(text, debug)
    
    async def _quick_spam_check(self, text: str, debug: Optional[DebugInfo]) -> Tuple[str, str]:
        """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º –±–µ–∑ –≤–µ–±-–ø–æ–∏—Å–∫–∞"""
        logger.info("‚ö° –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º...")
        
        try:
            response = await self.client.chat.completions.create(
                model="gpt-4o",
                messages=[{
                    "role": "user", 
                    "content": f"–≠—Ç–æ —Å–ø–∞–º/—Ä–µ–∫–ª–∞–º–∞/–º—É—Å–æ—Ä? –û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º (–¥–∞/–Ω–µ—Ç): {text[:200]}"
                }],
                max_completion_tokens=10,
                temperature=0.1
            )
            
            answer = response.choices[0].message.content.strip().lower()
            
            if "–¥–∞" in answer or "—Å–ø–∞–º" in answer:
                return "—Å–∫—Ä—ã—Ç–æ", "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∫–∞–∫ —Å–ø–∞–º/—Ä–µ–∫–ª–∞–º–∞"
            else:
                return "–¥—Ä—É–≥–æ–µ", ""
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
            return "–¥—Ä—É–≥–æ–µ", ""
    
    async def _fallback_check(self, text: str, debug: Optional[DebugInfo]) -> Tuple[str, str]:
        """–†–µ–∑–µ—Ä–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"""
        logger.info("üîÑ –†–µ–∑–µ—Ä–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...")
        
        try:
            response = await self.client.chat.completions.create(
                model="gpt-4o",
                messages=[{
                    "role": "user", 
                    "content": f"""
–ö—Ä–∞—Ç–∫–æ –æ—Ü–µ–Ω–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:
"{text}"

–≠—Ç–æ: 1) —Å–ø–∞–º/–º—É—Å–æ—Ä 2) –Ω–æ–≤–æ—Å—Ç–∏ 3) —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è 4) –¥—Ä—É–≥–æ–µ
–û—Ç–≤–µ—Ç—å –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π: –∫–∞—Ç–µ–≥–æ—Ä–∏—è | –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
"""
                }],
                max_completion_tokens=50,
                temperature=0.1
            )
            
            answer = response.choices[0].message.content.strip()
            
            if "—Å–ø–∞–º" in answer.lower() or "–º—É—Å–æ—Ä" in answer.lower():
                return "—Å–∫—Ä—ã—Ç–æ", "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∫–∞–∫ —Å–ø–∞–º"
            elif "–Ω–æ–≤–æ—Å—Ç–∏" in answer.lower():
                return "–Ω–æ–≤–æ—Å—Ç–∏", ""
            elif "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è" in answer.lower():
                return "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", ""
            else:
                return "–¥—Ä—É–≥–æ–µ", ""
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
            return "–¥—Ä—É–≥–æ–µ", ""