#!/usr/bin/env python3
"""
Fact-Checking Bot v2.0 - –î–≤—É—Ö—ç—Ç–∞–ø–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –æ—Ç–ª–∞–¥–∫–æ–π
"""

import asyncio
import logging
import os
import signal
import sys
from pyrogram import Client, filters
from pyrogram.types import Message

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ src
sys.path.append('src')
from config import Config
from debug_processor import DebugMessageProcessor
from command_handler import CommandHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
os.makedirs('logs', exist_ok=True)
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/fact_checker.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

class FactCheckingAppV2:
    def __init__(self):
        self.bot = Client(
            "fact_checker_v2",
            api_id=Config.TELEGRAM_API_ID,
            api_hash=Config.TELEGRAM_API_HASH,
            bot_token=Config.TELEGRAM_BOT_TOKEN
        )
        self.channels = Config.get_channels()
        self.processor = DebugMessageProcessor()
        self.command_handler = CommandHandler()
        self.channel_ids = {}
        self.running = False

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è v2.0"""
        try:
            Config.validate()
            logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
            
            await self.processor.start()
            await self.bot.start()
            
            # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞–Ω–∞–ª–æ–≤
            for channel in self.channels:
                try:
                    chat = await self.bot.get_chat(channel)
                    self.channel_ids[chat.id] = channel
                    logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–∞–Ω–∞–ª—É: {channel} (ID: {chat.id})")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–∞–Ω–∞–ª—É {channel}: {e}")
            
            if not self.channel_ids:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∏ –∫ –æ–¥–Ω–æ–º—É –∫–∞–Ω–∞–ª—É")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–æ–≤
            @self.bot.on_message(filters.chat(list(self.channel_ids.keys())))
            async def handle_channel_message(client, message: Message):
                channel_name = self.channel_ids.get(message.chat.id, "Unknown")
                await self.processor.process_message(message, channel_name)
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /check
            @self.bot.on_message(filters.command(["check"]) & filters.private)
            async def handle_check_command(client, message: Message):
                await self.command_handler.handle_check_command(client, message)
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
            @self.bot.on_message(filters.command(["help", "start"]) & filters.private)  
            async def handle_help_command(client, message: Message):
                await self.command_handler.handle_help_command(client, message)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
            await self.send_startup_notification()
            
            self.running = True
            logger.info("üîÑ Fact-checking bot v2.0 –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            
            # –ñ–¥–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
            while self.running:
                await asyncio.sleep(1)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            await self.stop()

    async def send_startup_notification(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ v2.0"""
        try:
            channels_text = "\n".join([f"‚Ä¢ {ch}" for ch in self.channels])
            
            mode_descriptions = {
                True: "üîß **–û–¢–õ–ê–î–û–ß–ù–´–ô –†–ï–ñ–ò–ú**\n‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è\n‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–µ\n‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏",
                False: "üéØ **–û–ë–´–ß–ù–´–ô –†–ï–ñ–ò–ú**\n‚Ä¢ –¢–æ–ª—å–∫–æ –ø—Ä–æ—à–µ–¥—à–∏–µ —Ñ–∏–ª—å—Ç—Ä\n‚Ä¢ –ö—Ä–∞—Ç–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"
            }
            
            mode_text = mode_descriptions[Config.DEBUG_MODE]
            
            await self.bot.send_message(
                chat_id=Config.TARGET_CHAT_ID,
                text=f"ü§ñ **Fact-checking Bot v2.0 –∑–∞–ø—É—â–µ–Ω!**\n\n"
                     f"üÜï **–ù–æ–≤–∞—è –¥–≤—É—Ö—ç—Ç–∞–ø–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:**\n"
                     f"1Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ‚Üí –≤—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤\n"
                     f"2Ô∏è‚É£ –§–∞–∫—Ç—á–µ–∫–∏–Ω–≥ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º\n\n"
                     f"üì° **–ú–æ–Ω–∏—Ç–æ—Ä—é –∫–∞–Ω–∞–ª—ã:**\n{channels_text}\n\n"
                     f"‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**\n"
                     f"‚Ä¢ –ú–æ–¥–µ–ª—å: {Config.GPT_MODEL}\n"
                     f"‚Ä¢ –†–µ–∂–∏–º: {Config.FACT_CHECK_MODE}\n"
                     f"‚Ä¢ –ú–∞–∫—Å. –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {Config.MAX_SOURCE_DOMAINS}\n\n"
                     f"{mode_text}\n\n"
                     f"üéØ **–ö–ª—é—á–µ–≤—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:**\n"
                     f"‚Ä¢ –£–º–Ω—ã–π –≤—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É\n"
                     f"‚Ä¢ –ê–≤—Ç–æ–ø–æ–∏—Å–∫ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∞–π—Ç–æ–≤ –∫–æ–º–ø–∞–Ω–∏–π\n"
                     f"‚Ä¢ –î–≤—É—Ö—ç—Ç–∞–ø–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏\n"
                     f"‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n"
                     f"‚úÖ **–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!**\n\n"
                     f"üîß **–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:**\n"
                     f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ `/check –≤–∞—à —Ç–µ–∫—Å—Ç` –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n"
                     f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/help` –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
            )
            logger.info("üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ v2.0 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if not self.running:
            return
            
        logger.info("üîÑ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ v2.0...")
        self.running = False
        
        try:
            await self.processor.stop()
            await self.bot.stop()
            logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ v2.0 –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")

async def main():
    app = FactCheckingAppV2()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
    def signal_handler(signum, frame):
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...")
        asyncio.create_task(app.stop())
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    try:
        await app.start()
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω Ctrl+C, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...")
        await app.stop()
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        await app.stop()
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())