#!/usr/bin/env python3
"""
Telegram Fact-Checking Bot
–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –∫–∞–Ω–∞–ª—ã, —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –º—É—Å–æ—Ä —á–µ—Ä–µ–∑ OpenAI –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
"""

import asyncio
import logging
import signal
import sys
from config import Config
from telegram_client import TelegramMonitor
from message_processor import MessageProcessor

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('fact_checker.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

class FactCheckingApp:
    def __init__(self):
        self.message_processor = MessageProcessor()
        self.telegram_monitor = None
        self.running = False
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            Config.validate()
            logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
            
            await self.message_processor.start()
            
            self.telegram_monitor = TelegramMonitor(
                message_handler=self.message_processor.process_message
            )
            
            await self.telegram_monitor.start()
            
            self.running = True
            logger.info("‚úÖ Fact-checking –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
            logger.info(f"üì° –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∫–∞–Ω–∞–ª—ã: {', '.join(Config.get_channels())}")
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç: {Config.TARGET_CHAT_ID}")
            
            await self.telegram_monitor.run_until_idle()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            await self.stop()
            
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if not self.running:
            return
            
        logger.info("üîÑ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
        
        try:
            if self.telegram_monitor:
                await self.telegram_monitor.stop()
                
            await self.message_processor.stop()
            
            self.running = False
            logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")

async def main():
    app = FactCheckingApp()
    
    def signal_handler(signum, frame):
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...")
        asyncio.create_task(app.stop())
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    try:
        await app.start()
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω Ctrl+C, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...")
        await app.stop()
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        await app.stop()
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())