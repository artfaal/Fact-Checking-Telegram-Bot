#!/usr/bin/env python3
"""
Fact-Checking Bot v3.0 - Simplified Direct Message Bot
"""

import asyncio
import logging
import os
import signal
import sys
from pyrogram import Client, filters
from pyrogram.types import Message

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ src
sys.path.append('src')
from config import Config
from command_handler import CommandHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
os.makedirs('logs', exist_ok=True)
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/fact_checker.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

class FactCheckingBot:
    def __init__(self):
        self.bot = Client(
            "fact_checker_bot",
            api_id=Config.TELEGRAM_API_ID,
            api_hash=Config.TELEGRAM_API_HASH,
            bot_token=Config.TELEGRAM_BOT_TOKEN
        )
        self.command_handler = CommandHandler()
        self.running = False

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            Config.validate()
            logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
            
            await self.bot.start()
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help –∏ /start
            @self.bot.on_message(filters.command(["help", "start"]) & filters.private)  
            async def handle_help_command(client, message: Message):
                await self.command_handler.handle_help_command(client, message)
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥)
            @self.bot.on_message(filters.text & filters.private & ~filters.command(["help", "start"]))
            async def handle_text_message(client, message: Message):
                await self.command_handler.handle_fact_check(client, message)
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å caption (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å –ø–æ–¥–ø–∏—Å—å—é)
            @self.bot.on_message((filters.photo | filters.video | filters.document) & filters.private & filters.caption)
            async def handle_media_message(client, message: Message):
                await self.command_handler.handle_fact_check(client, message)
            
            self.running = True
            logger.info("ü§ñ Fact-checking bot v3.0 –∑–∞–ø—É—â–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–∫—Ç–æ–≤!")
            
            # –ñ–¥–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
            while self.running:
                await asyncio.sleep(1)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            await self.stop()

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        if not self.running:
            return
            
        logger.info("üîÑ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...")
        self.running = False
        
        try:
            await self.bot.stop()
            logger.info("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")

async def main():
    app = FactCheckingBot()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
    def signal_handler(signum, frame):
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...")
        asyncio.create_task(app.stop())
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    try:
        await app.start()
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω Ctrl+C, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...")
        await app.stop()
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        await app.stop()
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())