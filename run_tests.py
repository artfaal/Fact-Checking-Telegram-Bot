#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
"""

import asyncio
import subprocess
import sys
import os

def run_test(test_name):
    """–ó–∞–ø—É—Å–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    print(f"\n{'='*50}")
    print(f"üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")
    print(f"{'='*50}")
    
    try:
        result = subprocess.run([
            sys.executable, 
            os.path.join('tests', f'{test_name}.py')
        ], check=True, capture_output=False)
        print(f"‚úÖ –¢–µ—Å—Ç {test_name} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –¢–µ—Å—Ç {test_name} –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞ {test_name}: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ fact-checking –±–æ—Ç–∞")
    
    tests = [
        'test_config',
        'test_two_stage',
        'test_translation_formatting'
    ]
    
    results = {}
    
    for test in tests:
        test_file = os.path.join('tests', f'{test}.py')
        if os.path.exists(test_file):
            results[test] = run_test(test)
        else:
            print(f"‚ö†Ô∏è –¢–µ—Å—Ç {test} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            results[test] = None
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\n{'='*50}")
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print(f"{'='*50}")
    
    passed = sum(1 for r in results.values() if r is True)
    failed = sum(1 for r in results.values() if r is False)
    skipped = sum(1 for r in results.values() if r is None)
    
    for test, result in results.items():
        if result is True:
            print(f"‚úÖ {test}")
        elif result is False:
            print(f"‚ùå {test}")
        else:
            print(f"‚ö†Ô∏è {test} (–ø—Ä–æ–ø—É—â–µ–Ω)")
    
    print(f"\n–í—Å–µ–≥–æ: {len(results)}")
    print(f"–£—Å–ø–µ—à–Ω–æ: {passed}")
    print(f"–û—à–∏–±–∫–∏: {failed}")
    print(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped}")
    
    if failed > 0:
        print(f"\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
        sys.exit(1)
    else:
        print(f"\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")

if __name__ == "__main__":
    main()