#!/usr/bin/env python3
"""
Fact-Checking Telegram Bot - –ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
"""

import asyncio
import logging
import signal
import sys
from pyrogram import Client, filters
from pyrogram.types import Message

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ src
sys.path.append('src')
from config import Config
from enhanced_filter import EnhancedOpenAIFilter
from telegram_client import TelegramBot

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('fact_checker.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

class FactCheckingApp:
    def __init__(self):
        self.bot = Client(
            "fact_checker_app",
            api_id=Config.TELEGRAM_API_ID,
            api_hash=Config.TELEGRAM_API_HASH,
            bot_token=Config.TELEGRAM_BOT_TOKEN
        )
        self.channels = Config.get_channels()
        self.ai_filter = EnhancedOpenAIFilter()
        self.telegram_bot = TelegramBot()
        self.channel_ids = {}
        self.running = False
        self.processed_messages = set()

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            Config.validate()
            logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
            
            await self.telegram_bot.start()
            await self.bot.start()
            
            # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞–Ω–∞–ª–æ–≤
            for channel in self.channels:
                try:
                    chat = await self.bot.get_chat(channel)
                    self.channel_ids[chat.id] = channel
                    logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–∞–Ω–∞–ª—É: {channel} (ID: {chat.id})")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–∞–Ω–∞–ª—É {channel}: {e}")
            
            if not self.channel_ids:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∏ –∫ –æ–¥–Ω–æ–º—É –∫–∞–Ω–∞–ª—É")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            @self.bot.on_message(filters.chat(list(self.channel_ids.keys())))
            async def handle_message(client, message: Message):
                await self.process_message(message)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
            await self.send_startup_notification()
            
            self.running = True
            logger.info("üîÑ Fact-checking –±–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            
            # –ñ–¥–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
            while self.running:
                await asyncio.sleep(1)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            await self.stop()

    async def process_message(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        
        if message.id in self.processed_messages:
            return
            
        self.processed_messages.add(message.id)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
        if len(self.processed_messages) > 10000:
            self.processed_messages.clear()
        
        channel_name = self.channel_ids.get(message.chat.id, "Unknown")
        text_content = self._extract_text(message)
        
        if not text_content:
            logger.info(f"üì≠ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –∏–∑ {channel_name}")
            return
            
        logger.info(f"üì® –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {channel_name}: {text_content[:100]}...")
        
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ —É–ª—É—á—à–µ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
            category, gpt_comment = await self.ai_filter.analyze_message(
                text_content, channel_name
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await self.telegram_bot.send_filtered_message(
                original_message=message,
                channel_name=channel_name,
                category=category,
                gpt_comment=gpt_comment
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ {channel_name}: {e}")
    
    def _extract_text(self, message: Message) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if message.text:
            return message.text
        elif message.caption:
            return message.caption
        else:
            return ""

    async def send_startup_notification(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ"""
        try:
            channels_text = "\n".join([f"‚Ä¢ {ch}" for ch in self.channels])
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            source_stats = self.ai_filter.get_source_stats()
            stats_text = "\n".join([
                f"‚Ä¢ **{cat}**: {info['domains_count']} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"
                for cat, info in source_stats.items()
            ])
            
            await self.bot.send_message(
                chat_id=Config.TARGET_CHAT_ID,
                text=f"ü§ñ **Enhanced Fact-checking –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!**\n\n"
                     f"üì° **–ú–æ–Ω–∏—Ç–æ—Ä—é –∫–∞–Ω–∞–ª—ã:**\n{channels_text}\n\n"
                     f"üîç **–§–∞–∫—Ç—á–µ–∫–∏–Ω–≥:** {Config.GPT_MODEL} —Å —É–º–Ω—ã–º –≤–µ–±-–ø–æ–∏—Å–∫–æ–º\n"
                     f"‚öôÔ∏è **–†–µ–∂–∏–º:** {Config.FACT_CHECK_MODE}\n"
                     f"üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:** –Ω–æ–≤–æ—Å—Ç–∏, —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è, –¥—Ä—É–≥–æ–µ\n\n"
                     f"üåê **–ò—Å—Ç–æ—á–Ω–∏–∫–∏:**\n{stats_text}\n\n"
                     f"üéØ **–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
                     f"‚Ä¢ –£–º–Ω—ã–π –≤—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–æ —Ç–µ–º–µ\n"
                     f"‚Ä¢ –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∞–π—Ç–æ–≤\n"
                     f"‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ —Ä–µ–∂–∏–º—ã –ø—Ä–æ–≤–µ—Ä–∫–∏\n"
                     f"‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ø–∞–º–∞\n\n"
                     f"‚úÖ **–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!**"
            )
            logger.info("üì§ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if not self.running:
            return
            
        logger.info("üîÑ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
        self.running = False
        
        try:
            await self.telegram_bot.stop()
            await self.bot.stop()
            logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")

async def main():
    app = FactCheckingApp()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
    def signal_handler(signum, frame):
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...")
        asyncio.create_task(app.stop())
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    try:
        await app.start()
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω Ctrl+C, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...")
        await app.stop()
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        await app.stop()
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())