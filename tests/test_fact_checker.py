#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–∫—Ç—á–µ–∫–µ—Ä–∞
"""

import asyncio
import logging
import os
from dotenv import load_dotenv
from openai_filter import OpenAIFilter

load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_fact_checker():
    """–¢–µ—Å—Ç —Ñ–∞–∫—Ç—á–µ–∫–µ—Ä–∞ —Å –≤–µ–±-–ø–æ–∏—Å–∫–æ–º"""
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∞–∫—Ç—á–µ–∫–µ—Ä —Å –≤–µ–±-–ø–æ–∏—Å–∫–æ–º...")
    
    if not os.getenv('OPENAI_API_KEY'):
        logger.error("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        filter_ai = OpenAIFilter()
        
        test_messages = [
            "–°–ø–∞–º! –ö—É–ø–∏ –¥–µ—à–µ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! –°–∫–∏–¥–∫–∞ 90%!",
            "–°–µ–≥–æ–¥–Ω—è –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç –†–æ—Å—Å–∏–∏ –ø–æ–¥–ø–∏—Å–∞–ª –Ω–æ–≤—ã–π –∑–∞–∫–æ–Ω –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏",
            "–ù–æ–≤—ã–π —Ñ–∏–ª—å–º Marvel –ø–æ–±–∏–ª –≤—Å–µ —Ä–µ–∫–æ—Ä–¥—ã –≤ –ø—Ä–æ–∫–∞—Ç–µ –∑–∞ –ø–µ—Ä–≤—ã–µ –≤—ã—Ö–æ–¥–Ω—ã–µ",
            "–∞",
            "–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ —Å–µ–≥–æ–¥–Ω—è —É–ø–∞–ª –¥–æ 50 —Ä—É–±–ª–µ–π",
            "–ó–∞–≤—Ç—Ä–∞ –≤ –ú–æ—Å–∫–≤–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è —Å–Ω–µ–≥ –≤ –æ–∫—Ç—è–±—Ä–µ"
        ]
        
        for i, message in enumerate(test_messages, 1):
            logger.info(f"üß™ –¢–µ—Å—Ç {i}: '{message}'")
            
            try:
                category, comment = await filter_ai.analyze_message(message, "test_channel")
                logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: –ö–∞—Ç–µ–≥–æ—Ä–∏—è='{category}', –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π='{comment}'")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {i}: {e}")
            
            await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            
        logger.info("‚úÖ –§–∞–∫—Ç—á–µ–∫–µ—Ä –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∞–∫—Ç—á–µ–∫–µ—Ä–∞: {e}")
        return False

async def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ñ–∞–∫—Ç—á–µ–∫–µ—Ä–∞...")
    
    fact_checker_ok = await test_fact_checker()
    
    if fact_checker_ok:
        logger.info("‚úÖ –§–∞–∫—Ç—á–µ–∫–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    else:
        logger.error("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å —Ñ–∞–∫—Ç—á–µ–∫–µ—Ä–æ–º")

if __name__ == "__main__":
    asyncio.run(main())