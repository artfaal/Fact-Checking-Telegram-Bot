#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Ñ–∞–∫—Ç—á–µ–∫–∏–Ω–≥–∞
"""

import asyncio
import logging
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ path
sys.path.append('../src')
sys.path.append('src')

from enhanced_filter import EnhancedOpenAIFilter
from sources_config import sources_config

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_enhanced_system():
    """–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    logger.info("üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Ñ–∞–∫—Ç—á–µ–∫–∏–Ω–≥–∞...")
    
    filter_ai = EnhancedOpenAIFilter()
    
    test_cases = [
        {
            "text": "Discord –æ–±—ä—è–≤–∏–ª–∞ –æ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ —Å –ò–ò-–º–æ–¥–µ—Ä–∞—Ü–∏–µ–π",
            "expected_sources": ["blog.discord.com", "discord.com", "techcrunch.com"],
            "description": "–ù–æ–≤–æ—Å—Ç—å –æ Discord - –¥–æ–ª–∂–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏"
        },
        {
            "text": "–ö—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞ —É–ø–∞–ª –¥–æ $30,000 –ø–æ—Å–ª–µ –∑–∞—è–≤–ª–µ–Ω–∏—è –§–†–°",
            "expected_sources": ["bloomberg.com", "reuters.com", "coindesk.com"],
            "description": "–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å - –¥–æ–ª–∂–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏"
        },
        {
            "text": "–£—á–µ–Ω—ã–µ –æ—Ç–∫—Ä—ã–ª–∏ –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –ª–µ—á–µ–Ω–∏—è —Ä–∞–∫–∞",
            "expected_sources": ["nature.com", "pubmed.ncbi.nlm.nih.gov", "who.int"],
            "description": "–ù–∞—É—á–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å - –¥–æ–ª–∂–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—É—á–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏"
        },
        {
            "text": "–°–ü–ê–ú! –ó–∞—Ä–∞–±–æ—Ç–∞–π –º–∏–ª–ª–∏–æ–Ω –∑–∞ –¥–µ–Ω—å! –ö–ª–∏–∫–Ω–∏ –∑–¥–µ—Å—å!",
            "expected_sources": [],
            "description": "–°–ø–∞–º - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω"
        }
    ]
    
    for i, case in enumerate(test_cases, 1):
        logger.info(f"\nüß™ –¢–µ—Å—Ç {i}: {case['description']}")
        logger.info(f"üìù –¢–µ–∫—Å—Ç: {case['text']}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        sources = sources_config.get_sources_for_topic(case['text'])
        logger.info(f"üåê –í—ã–±—Ä–∞–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(sources)}")
        logger.info(f"üìã –ü—Ä–∏–º–µ—Ä—ã –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {sources[:5]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–∂–∏–¥–∞–µ–º—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        if case['expected_sources']:
            found_expected = [s for s in case['expected_sources'] if s in sources]
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –æ–∂–∏–¥–∞–µ–º—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏: {found_expected}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        try:
            category, comment = await filter_ai.analyze_message(case['text'], "Test Channel")
            logger.info(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
            logger.info(f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        
        await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    
    # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    logger.info("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:")
    stats = filter_ai.get_source_stats()
    for category, info in stats.items():
        logger.info(f"‚Ä¢ {category}: {info['domains_count']} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
        logger.info(f"  –ü—Ä–∏–º–µ—Ä—ã: {', '.join(info['domains'][:3])}")
    
    logger.info("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(test_enhanced_system())