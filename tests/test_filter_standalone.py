#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç config
"""

import asyncio
import logging
import json
import os
from dotenv import load_dotenv
from openai import AsyncOpenAI

load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class TestOpenAIFilter:
    def __init__(self):
        self.client = AsyncOpenAI(api_key=os.getenv('OPENAI_API_KEY'))
        self.gpt5_available = True

    async def analyze_message(self, text: str, channel_name: str):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–µ–±-–ø–æ–∏—Å–∫–æ–º"""
        if not text or len(text.strip()) < 10:
            return "—Å–∫—Ä—ã—Ç–æ", "–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
            
        try:
            fact_check_result = await self._fact_check(text)
            category = await self._categorize(text)
            
            if fact_check_result["is_garbage"]:
                return "—Å–∫—Ä—ã—Ç–æ", fact_check_result["reason"]
            elif fact_check_result["is_questionable"]:
                return category, fact_check_result["comment"]
            else:
                return category, ""
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ OpenAI: {e}")
            return "–¥—Ä—É–≥–æ–µ", ""

    async def _fact_check(self, text: str):
        """–§–∞–∫—Ç—á–µ–∫–∏–Ω–≥ —Å –≤–µ–±-–ø–æ–∏—Å–∫–æ–º"""
        prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π –≤–µ–±-–ø–æ–∏—Å–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–∫—Ç–æ–≤, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, —Ü–∏—Ñ—Ä—ã, —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ –Ω–æ–≤–æ—Å—Ç–∏.

–°–æ–æ–±—â–µ–Ω–∏–µ: "{text}"

–û–ø—Ä–µ–¥–µ–ª–∏:
1. –≠—Ç–æ –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã–π –º—É—Å–æ—Ä/—Å–ø–∞–º/—Ä–µ–∫–ª–∞–º–∞? (–¥–∞/–Ω–µ—Ç)
2. –°–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏–ª–∏ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é? (–¥–∞/–Ω–µ—Ç) 
3. –ï—Å–ª–∏ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ - –¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤)

–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–∫—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞.

–û—Ç–≤–µ—Ç—å –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{{
    "is_garbage": true/false,
    "is_questionable": true/false,
    "reason": "–ø—Ä–∏—á–∏–Ω–∞ –¥–ª—è –º—É—Å–æ—Ä–∞",
    "comment": "–∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ"
}}
"""

        try:
            response = await self.client.responses.create(
                model="gpt-5" if self.gpt5_available else "gpt-4o",
                tools=[{
                    "type": "web_search",
                    "filters": {
                        "allowed_domains": [
                            "reuters.com",
                            "bbc.com", 
                            "cnn.com",
                            "tass.ru",
                            "ria.ru",
                            "kommersant.ru",
                            "vedomosti.ru",
                            "gazeta.ru",
                            "rbc.ru",
                            "interfax.ru"
                        ]
                    }
                }],
                input=prompt
            )
            
            output_text = response.output_text
            logger.info(f"–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç GPT: {output_text}")
            
            # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ JSON –≤ –æ—Ç–≤–µ—Ç–µ
            try:
                # –ò—â–µ–º JSON –±–ª–æ–∫ –≤ —Ç–µ–∫—Å—Ç–µ
                json_start = output_text.find('{')
                json_end = output_text.rfind('}') + 1
                if json_start != -1 and json_end > json_start:
                    json_text = output_text[json_start:json_end]
                    result = json.loads(json_text)
                else:
                    raise json.JSONDecodeError("JSON –Ω–µ –Ω–∞–π–¥–µ–Ω", output_text, 0)
                    
                return {
                    "is_garbage": result.get("is_garbage", False),
                    "is_questionable": result.get("is_questionable", False),
                    "reason": result.get("reason", ""),
                    "comment": result.get("comment", "")
                }
            except json.JSONDecodeError:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç–≤–µ—Ç: {output_text}")
                return self._fallback_fact_check(text)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∞–∫—Ç—á–µ–∫–∏–Ω–≥–∞ —Å –≤–µ–±-–ø–æ–∏—Å–∫–æ–º: {e}")
            if "gpt-5" in str(e) and self.gpt5_available:
                logger.info("GPT-5 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ GPT-4o")
                self.gpt5_available = False
                return await self._fact_check(text)
            return self._fallback_fact_check(text)

    async def _fallback_fact_check(self, text: str):
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π —Ñ–∞–∫—Ç—á–µ–∫–∏–Ω–≥ –±–µ–∑ –≤–µ–±-–ø–æ–∏—Å–∫–∞"""
        prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∫–∞—á–µ—Å—Ç–≤–∞:

"{text}"

–û–ø—Ä–µ–¥–µ–ª–∏:
1. –≠—Ç–æ –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã–π –º—É—Å–æ—Ä/—Å–ø–∞–º/—Ä–µ–∫–ª–∞–º–∞? (–¥–∞/–Ω–µ—Ç)
2. –°–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é? (–¥–∞/–Ω–µ—Ç)
3. –ï—Å–ª–∏ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ - –¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤)

–û—Ç–≤–µ—Ç—å –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{{
    "is_garbage": true/false,
    "is_questionable": true/false,
    "reason": "–ø—Ä–∏—á–∏–Ω–∞ –¥–ª—è –º—É—Å–æ—Ä–∞",
    "comment": "–∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ"
}}
"""

        try:
            response = await self.client.chat.completions.create(
                model="gpt-4o",
                messages=[{"role": "user", "content": prompt}],
                max_completion_tokens=200,
                temperature=0.1
            )
            
            result_text = response.choices[0].message.content.strip()
            result = json.loads(result_text)
            
            return {
                "is_garbage": result.get("is_garbage", False),
                "is_questionable": result.get("is_questionable", False),
                "reason": result.get("reason", ""),
                "comment": result.get("comment", "")
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ —Ñ–∞–∫—Ç—á–µ–∫–∏–Ω–≥–∞: {e}")
            return {
                "is_garbage": False,
                "is_questionable": False,
                "reason": "",
                "comment": ""
            }

    async def _categorize(self, text: str):
        """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
        prompt = f"""
–û–ø—Ä–µ–¥–µ–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:

"{text}"

–í—ã–±–µ—Ä–∏ –û–î–ù–£ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:
- –Ω–æ–≤–æ—Å—Ç–∏ (–ø–æ–ª–∏—Ç–∏–∫–∞, —ç–∫–æ–Ω–æ–º–∏–∫–∞, —Å–æ–±—ã—Ç–∏—è, –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è)
- —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è (—à–æ—É-–±–∏–∑–Ω–µ—Å, —Å–ø–æ—Ä—Ç, –∫—É–ª—å—Ç—É—Ä–∞, —é–º–æ—Ä)
- –¥—Ä—É–≥–æ–µ (–≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ)

–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
"""

        try:
            if self.gpt5_available:
                response = await self.client.chat.completions.create(
                    model="gpt-5",
                    messages=[{"role": "user", "content": prompt}],
                    max_completion_tokens=20
                )
            else:
                response = await self.client.chat.completions.create(
                    model="gpt-4o",
                    messages=[{"role": "user", "content": prompt}],
                    max_completion_tokens=20,
                    temperature=0.1
                )
            
            category = response.choices[0].message.content.strip().lower()
            
            if category in ["–Ω–æ–≤–æ—Å—Ç–∏", "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "–¥—Ä—É–≥–æ–µ"]:
                return category
            else:
                return "–¥—Ä—É–≥–æ–µ"
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return "–¥—Ä—É–≥–æ–µ"

async def test_fact_checker():
    """–¢–µ—Å—Ç —Ñ–∞–∫—Ç—á–µ–∫–µ—Ä–∞ —Å –≤–µ–±-–ø–æ–∏—Å–∫–æ–º"""
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∞–∫—Ç—á–µ–∫–µ—Ä —Å –≤–µ–±-–ø–æ–∏—Å–∫–æ–º...")
    
    if not os.getenv('OPENAI_API_KEY'):
        logger.error("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        filter_ai = TestOpenAIFilter()
        
        test_messages = [
            "–°–ø–∞–º! –ö—É–ø–∏ –¥–µ—à–µ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! –°–∫–∏–¥–∫–∞ 90%!",
            "–°–µ–≥–æ–¥–Ω—è –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç –†–æ—Å—Å–∏–∏ –ø–æ–¥–ø–∏—Å–∞–ª –Ω–æ–≤—ã–π –∑–∞–∫–æ–Ω –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏",
            "–ù–æ–≤—ã–π —Ñ–∏–ª—å–º Marvel –ø–æ–±–∏–ª –≤—Å–µ —Ä–µ–∫–æ—Ä–¥—ã –≤ –ø—Ä–æ–∫–∞—Ç–µ –∑–∞ –ø–µ—Ä–≤—ã–µ –≤—ã—Ö–æ–¥–Ω—ã–µ"
        ]
        
        for i, message in enumerate(test_messages, 1):
            logger.info(f"üß™ –¢–µ—Å—Ç {i}: '{message}'")
            
            try:
                category, comment = await filter_ai.analyze_message(message, "test_channel")
                logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: –ö–∞—Ç–µ–≥–æ—Ä–∏—è='{category}', –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π='{comment}'")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {i}: {e}")
            
            await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            
        logger.info("‚úÖ –§–∞–∫—Ç—á–µ–∫–µ—Ä –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∞–∫—Ç—á–µ–∫–µ—Ä–∞: {e}")
        return False

async def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ñ–∞–∫—Ç—á–µ–∫–µ—Ä–∞...")
    
    fact_checker_ok = await test_fact_checker()
    
    if fact_checker_ok:
        logger.info("‚úÖ –§–∞–∫—Ç—á–µ–∫–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    else:
        logger.error("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å —Ñ–∞–∫—Ç—á–µ–∫–µ—Ä–æ–º")

if __name__ == "__main__":
    asyncio.run(main())