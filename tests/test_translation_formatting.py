#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ä—É—Å—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π
"""

import asyncio
import logging
import sys
import os
from unittest.mock import AsyncMock, MagicMock, patch

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

from two_stage_filter import TwoStageFilter, DebugInfo
from command_handler import CommandHandler
from config import Config

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class MockBot:
    """Mock –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    def __init__(self):
        self.messages = []
    
    async def send_message(self, chat_id, text, reply_to_message_id=None):
        message = MagicMock()
        message.id = len(self.messages) + 1
        message.text = text
        self.messages.append({"chat_id": chat_id, "text": text, "reply_to": reply_to_message_id})
        return message
    
    async def edit_message_text(self, chat_id, message_id, text):
        self.messages.append({"chat_id": chat_id, "message_id": message_id, "text": text, "edited": True})
    
    async def delete_messages(self, chat_id, message_ids):
        pass

class MockMessage:
    """Mock –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    def __init__(self, text, username="testuser"):
        self.text = text
        self.caption = None
        self.chat = MagicMock()
        self.chat.id = 12345
        self.from_user = MagicMock()
        self.from_user.username = username
        self.from_user.first_name = "Test User"
        self.id = 67890

async def test_translation_functionality():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
    logger.info("üåê –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞...")
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ –≤–∫–ª—é—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    original_translate = Config.TRANSLATE_TO_RUSSIAN
    Config.TRANSLATE_TO_RUSSIAN = True
    
    try:
        filter_system = TwoStageFilter()
        
        # –°–æ–∑–¥–∞–µ–º mock debug_info —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏ –ø–æ–ª—è–º–∏
        debug_info = DebugInfo()
        debug_info.detailed_findings = "The announcement was confirmed by official Discord blog post on March 15, 2024"
        debug_info.contradictions = "No contradictions found in multiple sources"
        debug_info.missing_evidence = "No additional evidence needed for this confirmed information"
        
        # –ú–æ–∫–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥, —á—Ç–æ–±—ã –Ω–µ –¥–µ–ª–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ API –≤—ã–∑–æ–≤—ã
        with patch.object(filter_system, '_translate_text') as mock_translate:
            mock_translate.side_effect = [
                "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –±–ª–æ–≥–æ–º Discord –æ—Ç 15 –º–∞—Ä—Ç–∞ 2024 –≥–æ–¥–∞",
                "–ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", 
                "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
            ]
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
            await filter_system._translate_comment_fields(debug_info)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            logger.info("üìã –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—è:")
            logger.info(f"  –î–µ—Ç–∞–ª—å–Ω—ã–µ –≤—ã–≤–æ–¥—ã: {debug_info.detailed_findings}")
            logger.info(f"  –ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è: {debug_info.contradictions}")
            logger.info(f"  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞: {debug_info.missing_evidence}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–µ—Ä–µ–≤–æ–¥ –±—ã–ª –≤—ã–∑–≤–∞–Ω
            assert mock_translate.call_count == 3
            assert "Discord" in debug_info.detailed_findings
            logger.info("‚úÖ –ü–µ—Ä–µ–≤–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    finally:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        Config.TRANSLATE_TO_RUSSIAN = original_translate

async def test_formatting_with_all_fields():
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≤—Å–µ—Ö –ø–æ–ª–µ–π –æ—Ç–¥–µ–ª—å–Ω–æ"""
    logger.info("üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–∞–∑–¥–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏...")
    
    handler = CommandHandler()
    
    # –°–æ–∑–¥–∞–µ–º debug_info —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª—è–º–∏
    debug_info = DebugInfo()
    debug_info.confidence_score = 85
    debug_info.verification_status = "partially_confirmed"
    debug_info.detailed_findings = "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –±–ª–æ–≥–æ–º Discord –æ—Ç 15 –º–∞—Ä—Ç–∞ 2024 –≥–æ–¥–∞"
    debug_info.contradictions = "–î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –≤ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö"
    debug_info.missing_evidence = "–¢–æ—á–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã"
    debug_info.sources_found = ["discord.com", "techcrunch.com", "theverge.com"]
    debug_info.reasoning = "–í—ã–±—Ä–∞–Ω—ã –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è fact check
    result = await handler._format_fact_check_result("–Ω–æ–≤–æ—Å—Ç–∏", "–ß–∞—Å—Ç–∏—á–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ", debug_info)
    
    logger.info("üé® –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è fact check:")
    logger.info(result)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
    assert "üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ –≤—ã–≤–æ–¥—ã:" in result
    assert "‚ö†Ô∏è –ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è:" in result  
    assert "‚ùì –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞:" in result
    assert "üåê –ò—Å—Ç–æ—á–Ω–∏–∫–∏:" in result
    assert "üí≠ –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞:" in result
    assert "85%" in result
    logger.info("‚úÖ –í—Å–µ –ø–æ–ª—è –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è check command
    check_result = await handler._format_check_result(
        "Discord –æ–±—ä—è–≤–∏–ª –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é", "–Ω–æ–≤–æ—Å—Ç–∏", "–ß–∞—Å—Ç–∏—á–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ", debug_info
    )
    
    logger.info("\nüé® –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è check command:")
    logger.info(check_result)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏ –≤ check —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
    assert "üìã **–î–µ—Ç–∞–ª—å–Ω—ã–µ –≤—ã–≤–æ–¥—ã:**" in check_result
    assert "‚ö†Ô∏è **–ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è:**" in check_result  
    assert "‚ùì **–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞:**" in check_result
    assert "üåê **–ò—Å—Ç–æ—á–Ω–∏–∫–∏:**" in check_result
    logger.info("‚úÖ Check command —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

async def test_formatting_with_missing_fields():
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–≥–¥–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏...")
    
    handler = CommandHandler()
    
    # –°–æ–∑–¥–∞–µ–º debug_info —Ç–æ–ª—å–∫–æ —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ –ø–æ–ª—è–º–∏
    debug_info = DebugInfo()
    debug_info.confidence_score = 95
    debug_info.verification_status = "confirmed"
    debug_info.detailed_findings = "–ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏"
    # contradictions –∏ missing_evidence –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ –ø—É—Å—Ç—ã–µ
    debug_info.contradictions = ""
    debug_info.missing_evidence = ""
    debug_info.sources_found = ["discord.com"]
    
    result = await handler._format_fact_check_result("–Ω–æ–≤–æ—Å—Ç–∏", "–î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ", debug_info)
    
    logger.info("üé® –†–µ–∑—É–ª—å—Ç–∞—Ç —Å —á–∞—Å—Ç–∏—á–Ω—ã–º–∏ –ø–æ–ª—è–º–∏:")
    logger.info(result)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—É—Å—Ç—ã–µ –ø–æ–ª—è –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è
    assert "üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ –≤—ã–≤–æ–¥—ã:" in result
    assert "‚ö†Ô∏è –ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è:" not in result  # –ü—É—Å—Ç–æ–µ –ø–æ–ª–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è
    assert "‚ùì –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞:" not in result  # –ü—É—Å—Ç–æ–µ –ø–æ–ª–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è
    assert "üåê –ò—Å—Ç–æ—á–Ω–∏–∫–∏:" in result
    logger.info("‚úÖ –ü—É—Å—Ç—ã–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–∫—Ä—ã–≤–∞—é—Ç—Å—è")

async def test_integration_mock_fact_check():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å –º–æ–∫–æ–º API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞"""
    logger.info("üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ –≤–∫–ª—é—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥
    original_translate = Config.TRANSLATE_TO_RUSSIAN
    Config.TRANSLATE_TO_RUSSIAN = True
    
    try:
        handler = CommandHandler()
        bot = MockBot()
        message = MockMessage("Discord announced new AI moderation feature for voice channels")
        
        # –ú–æ–∫–∞–µ–º –≤–µ—Å—å two_stage_filter –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        with patch.object(handler.two_stage_filter, 'analyze_message') as mock_analyze:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º mock —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
            debug_info = DebugInfo()
            debug_info.confidence_score = 78
            debug_info.verification_status = "partially_confirmed"
            debug_info.detailed_findings = "–§—É–Ω–∫—Ü–∏—è –ò–ò-–º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –≤ –±–ª–æ–≥–µ Discord"
            debug_info.contradictions = "–î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–∞–∑–ª–∏—á–∞–µ—Ç—Å—è –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö"
            debug_info.missing_evidence = "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏ –Ω–µ —Ä–∞—Å–∫—Ä—ã—Ç—ã"
            debug_info.sources_found = ["discord.com", "techcrunch.com"]
            debug_info.reasoning = "–í—ã–±—Ä–∞–Ω—ã –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ Discord –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–Ω—ã–µ —Å–∞–π—Ç—ã"
            
            mock_analyze.return_value = ("–Ω–æ–≤–æ—Å—Ç–∏", "–ß–∞—Å—Ç–∏—á–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ", debug_info)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º fact check
            await handler.handle_fact_check(bot, message)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
            assert len(bot.messages) >= 2  # processing + result –∏–ª–∏ delete
            
            # –ù–∞—Ö–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–ø–æ—Å–ª–µ–¥–Ω–µ–µ send_message)
            result_messages = [msg for msg in bot.messages if msg.get("reply_to") is not None]
            assert len(result_messages) > 0
            
            result_text = result_messages[0]["text"]
            logger.info("üì® –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
            logger.info(result_text)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
            assert "üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ –≤—ã–≤–æ–¥—ã:" in result_text
            assert "‚ö†Ô∏è –ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è:" in result_text
            assert "‚ùì –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞:" in result_text
            assert "üåê –ò—Å—Ç–æ—á–Ω–∏–∫–∏:" in result_text
            assert "78%" in result_text
            
            logger.info("‚úÖ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º")
    
    finally:
        Config.TRANSLATE_TO_RUSSIAN = original_translate

async def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    tests = [
        test_translation_functionality,
        test_formatting_with_all_fields,
        test_formatting_with_missing_fields,
        test_integration_mock_fact_check
    ]
    
    for test_func in tests:
        try:
            await test_func()
            logger.info(f"‚úÖ {test_func.__name__} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå {test_func.__name__} –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è: {e}")
            raise
        
        await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    
    logger.info("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(run_all_tests())