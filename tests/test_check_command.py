#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–∫—Ç–æ–≤
"""

import asyncio
import logging
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

from config import Config
from command_handler import CommandHandler

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class MockMessage:
    """–ú–æ–∫ –æ–±—ä–µ–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"""
    def __init__(self, text: str, chat_id: int):
        self.text = text
        self.chat = type('Chat', (), {'id': chat_id})()

class MockBot:
    """–ú–æ–∫ –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    def __init__(self):
        self.messages = []
        
    async def send_message(self, chat_id, text):
        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {text[:100]}...")
        message = type('Message', (), {'id': len(self.messages) + 1})()
        self.messages.append(text)
        return message
        
    async def edit_message_text(self, chat_id, message_id, text):
        logger.info(f"‚úèÔ∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ: {text[:100]}...")
        if self.messages:
            self.messages[-1] = text

async def test_check_command():
    """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /check"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /check...")
    
    handler = CommandHandler()
    mock_bot = MockBot()
    
    test_cases = [
        {
            "text": "/check Discord –æ–±—ä—è–≤–∏–ª –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –ò–ò-–º–æ–¥–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤",
            "description": "–ù–æ–≤–æ—Å—Ç—å –æ Discord"
        },
        {
            "text": "/check –°–£–ü–ï–† –°–ö–ò–î–ö–ê! iPhone –∑–∞ 999 —Ä—É–±–ª–µ–π! –¢–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è!",
            "description": "–°–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–µ"
        },
        {
            "text": "/check",
            "description": "–ö–æ–º–∞–Ω–¥–∞ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞"
        }
    ]
    
    for i, case in enumerate(test_cases, 1):
        logger.info(f"\nüß™ === –¢–ï–°–¢ {i}: {case['description']} ===")
        logger.info(f"üìù –ö–æ–º–∞–Ω–¥–∞: {case['text']}")
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
        mock_message = MockMessage(case['text'], 12345)  # –§–∏–∫—Ç–∏–≤–Ω—ã–π chat_id
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã
            await handler.handle_check_command(mock_bot, mock_message)
            logger.info(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {i}: {e}")
        
        await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    
    logger.info("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(test_check_command())