#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ –±–æ—Ç
"""

import asyncio
import logging
from pyrogram import Client, filters
from pyrogram.types import Message
from config import Config
from message_processor import MessageProcessor

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('fact_checker.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

class BotMonitor:
    def __init__(self):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        self.app = Client(
            "fact_checker_bot_monitor",
            api_id=Config.TELEGRAM_API_ID,
            api_hash=Config.TELEGRAM_API_HASH,
            bot_token=Config.TELEGRAM_BOT_TOKEN
        )
        self.channels = Config.get_channels()
        self.message_processor = MessageProcessor()
        self.running = False

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            Config.validate()
            logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
            
            await self.message_processor.start()
            await self.app.start()
            
            logger.info("‚úÖ Fact-checking –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
            logger.info(f"üì° –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∫–∞–Ω–∞–ª—ã: {', '.join(self.channels)}")
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç: {Config.TARGET_CHAT_ID}")
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª–∞–º
            for channel in self.channels:
                try:
                    chat = await self.app.get_chat(channel)
                    logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–∞–Ω–∞–ª—É: {channel} (ID: {chat.id})")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–∞–Ω–∞–ª—É {channel}: {e}")
            
            self.running = True
            
            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ - –æ—Ç–ø—Ä–∞–≤–∏–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.send_test_message()
            
            logger.info("üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            
            # –ñ–¥–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ, –ø–æ–∫–∞ –Ω–µ –ø—Ä–µ—Ä–≤—É—Ç
            try:
                while self.running:
                    await asyncio.sleep(1)
            except asyncio.CancelledError:
                logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            await self.stop()
            
    async def send_test_message(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ"""
        try:
            await self.app.send_message(
                chat_id=Config.TARGET_CHAT_ID,
                text="ü§ñ **Fact-checking –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!**\n\n"
                     f"üì° –ú–æ–Ω–∏—Ç–æ—Ä—é –∫–∞–Ω–∞–ª—ã: {', '.join(self.channels)}\n"
                     f"üîç –§–∞–∫—Ç—á–µ–∫–∏–Ω–≥ —á–µ—Ä–µ–∑ GPT-5 —Å –≤–µ–±-–ø–æ–∏—Å–∫–æ–º\n"
                     f"‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"
            )
            logger.info("üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if not self.running:
            return
            
        logger.info("üîÑ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...")
        
        try:
            await self.message_processor.stop()
            await self.app.stop()
            
            self.running = False
            logger.info("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")

async def main():
    monitor = BotMonitor()
    
    try:
        await monitor.start()
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω Ctrl+C, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...")
        await monitor.stop()
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        await monitor.stop()

if __name__ == "__main__":
    asyncio.run(main())