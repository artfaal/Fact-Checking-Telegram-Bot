#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–≤—É—Ö—ç—Ç–∞–ø–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Ñ–∞–∫—Ç—á–µ–∫–∏–Ω–≥–∞
"""

import asyncio
import logging
import sys

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ path
sys.path.append('src')

from two_stage_filter import TwoStageFilter

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_two_stage_system():
    """–¢–µ—Å—Ç –¥–≤—É—Ö—ç—Ç–∞–ø–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    logger.info("üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–≤—É—Ö—ç—Ç–∞–ø–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Ñ–∞–∫—Ç—á–µ–∫–∏–Ω–≥–∞...")
    
    filter_system = TwoStageFilter()
    
    test_cases = [
        {
            "text": "Discord –æ–±—ä—è–≤–∏–ª–∞ –æ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —ç–∫—Ä–∞–Ω–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å –ò–ò-–º–æ–¥–µ—Ä–∞—Ü–∏–µ–π",
            "description": "–ù–æ–≤–æ—Å—Ç—å –æ Discord - –¥–æ–ª–∂–Ω–∞ –Ω–∞–π—Ç–∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏"
        },
        {
            "text": "–ë–∏—Ç–∫–æ–∏–Ω —É–ø–∞–ª –Ω–∞ 20% –ø–æ—Å–ª–µ –∑–∞—è–≤–ª–µ–Ω–∏—è –§–†–° –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —Å—Ç–∞–≤–∫–∏",
            "description": "–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å - —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏"
        },
        {
            "text": "–°–£–ü–ï–† –°–ö–ò–î–ö–ê! iPhone –∑–∞ 1000 —Ä—É–±–ª–µ–π! –¢–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è! –ñ–º–∏ —Å—Å—ã–ª–∫—É!",
            "description": "–°–ø–∞–º - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω –±–µ–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"
        },
        {
            "text": "–£—á–µ–Ω—ã–µ MIT —Å–æ–∑–¥–∞–ª–∏ –∫–≤–∞–Ω—Ç–æ–≤—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è",
            "description": "–ù–∞—É—á–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å - –Ω–∞—É—á–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏"
        }
    ]
    
    for i, case in enumerate(test_cases, 1):
        logger.info(f"\nüß™ === –¢–ï–°–¢ {i}: {case['description']} ===")
        logger.info(f"üìù –¢–µ–∫—Å—Ç: {case['text']}")
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–≤—É—Ö—ç—Ç–∞–ø–Ω—É—é —Å–∏—Å—Ç–µ–º—É
            category, comment, debug_info = await filter_system.analyze_message(
                case['text'], "Test Channel"
            )
            
            logger.info(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢:")
            logger.info(f"  üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
            logger.info(f"  üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}")
            
            if debug_info:
                logger.info(f"üîß DEBUG INFO:")
                logger.info(f"  ‚è±Ô∏è –≠—Ç–∞–ø 1: {debug_info.stage1_time:.2f}—Å")
                logger.info(f"  ‚è±Ô∏è –≠—Ç–∞–ø 2: {debug_info.stage2_time:.2f}—Å")
                logger.info(f"  üåê –ù–∞–π–¥–µ–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {debug_info.sources_count}")
                logger.info(f"  üìã –ü—Ä–∏–º–µ—Ä—ã –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {debug_info.sources_found[:5]}")
                logger.info(f"  üí≠ –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞: {debug_info.reasoning}")
                
                if debug_info.web_search_used:
                    logger.info(f"  üîç –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≤–µ–±-–ø–æ–∏—Å–∫: –î–ê")
                if debug_info.fallback_used:
                    logger.info(f"  üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback: –î–ê")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {i}: {e}")
        
        await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    
    logger.info("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–≤—É—Ö—ç—Ç–∞–ø–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(test_two_stage_system())