#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ OpenAI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
"""

import asyncio
import logging
import os
from dotenv import load_dotenv
from openai import AsyncOpenAI

load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_openai():
    """–¢–µ—Å—Ç OpenAI API"""
    logger.info("ü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º OpenAI API...")
    
    api_key = os.getenv('OPENAI_API_KEY')
    if not api_key:
        logger.error("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        client = AsyncOpenAI(api_key=api_key)
        
        # –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        logger.info("–¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å...")
        response = await client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": "–°–∫–∞–∂–∏ '–ü—Ä–∏–≤–µ—Ç' –ø–æ-—Ä—É—Å—Å–∫–∏"}],
            max_tokens=50
        )
        logger.info(f"–û—Ç–≤–µ—Ç: {response.choices[0].message.content}")
        
        # –¢–µ—Å—Ç GPT-5 (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        try:
            logger.info("–¢–µ—Å—Ç–∏—Ä—É–µ–º GPT-5...")
            response_gpt5 = await client.chat.completions.create(
                model="gpt-5",
                messages=[{"role": "user", "content": "–°–∫–∞–∂–∏ 'GPT-5 —Ä–∞–±–æ—Ç–∞–µ—Ç'"}],
                max_completion_tokens=50
            )
            logger.info(f"GPT-5 –æ—Ç–≤–µ—Ç: {response_gpt5.choices[0].message.content}")
        except Exception as e:
            logger.warning(f"GPT-5 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        # –¢–µ—Å—Ç Responses API —Å –≤–µ–±-–ø–æ–∏—Å–∫–æ–º
        try:
            logger.info("–¢–µ—Å—Ç–∏—Ä—É–µ–º Responses API —Å –≤–µ–±-–ø–æ–∏—Å–∫–æ–º...")
            response_web = await client.responses.create(
                model="gpt-4o",
                tools=[{"type": "web_search"}],
                input="–ö–∞–∫–∞—è —Å–µ–≥–æ–¥–Ω—è –ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ?"
            )
            logger.info(f"–í–µ–±-–ø–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç: {response_web.output_text[:200]}...")
        except Exception as e:
            logger.warning(f"–í–µ–±-–ø–æ–∏—Å–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        logger.info("‚úÖ OpenAI API —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ OpenAI: {e}")
        return False

async def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ OpenAI...")
    
    openai_ok = await test_openai()
    
    if openai_ok:
        logger.info("‚úÖ OpenAI API –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    else:
        logger.error("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å OpenAI API")

if __name__ == "__main__":
    asyncio.run(main())